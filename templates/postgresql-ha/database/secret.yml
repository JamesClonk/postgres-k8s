#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:overlay", "overlay")
#@ load("_ytt.lib.yml", "labels")

#@overlay/match by=overlay.subset({"kind": "Secret", "metadata":{"name":"postgres-postgresql-ha-pgpool"}})
---
#@overlay/replace
data:
  #@ if len(data.values.pgpool.admin.password) == 0:
  #@  assert.fail("pgpool.admin.password cannot be empty")
  #@ end
  admin-password: #@ base64.encode(data.values.pgpool.admin.password)

#@overlay/match by=overlay.subset({"kind": "Secret", "metadata":{"name":"postgres-postgresql-ha-postgresql"}})
---
#@overlay/replace
data:
  #@ if len(data.values.postgres.database.password) == 0:
  #@  assert.fail("postgres.database.password cannot be empty")
  #@ end
  #@ if len(data.values.postgres.repmgr.password) == 0:
  #@  assert.fail("postgres.repmgr.password cannot be empty")
  #@ end
  postgresql-password: #@ base64.encode(data.values.postgres.database.password)
  repmgr-password: #@ base64.encode(data.values.postgres.repmgr.password)

---
apiVersion: v1
kind: Secret
metadata:
  name: additional-database-credentials
  namespace: #@ data.values.namespace
  labels: #@ labels("additional-database-credentials")
#@yaml/text-templated-strings
data:
  default: empty
  #@ for db in data.values.postgres.additional_databases:
  #@ if len(db.name) == 0:
  #@  assert.fail("name of additional database cannot be empty")
  #@ end
  #@ if len(db.user) == 0:
  #@  assert.fail("user of additional database cannot be empty")
  #@ end
  #@ if len(db.password) == 0:
  #@  assert.fail("password of additional database cannot be empty")
  #@ end
  (@= db.name @).username: (@= base64.encode(db.user) @)
  (@= db.name @).password: (@= base64.encode(db.password) @)
  #@ end
