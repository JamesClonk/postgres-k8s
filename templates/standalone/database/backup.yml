#@ load("@ytt:data", "data")
#@ load("_ytt.lib.yml", "disk", "connstr")

#@ def backupJobTemplate():
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: backup
        image: #@ data.values.postgres.image
        command: ["pg_basebackup"]
        args:
        - -h
        - #@ data.values.app + "-database." + data.values.namespace + ".svc.cluster.local"
        - -p
        - #@ str(data.values.postgres.database.port)
        - -U
        - #@ data.values.postgres.database.user
        - -d
        - #@ connstr()
        - -D
        - /var/lib/postgresql/backup
        - -Ft
        - -z
        - -Xs
        - -P
        - -v
        envFrom:
        - secretRef:
            name: #@ data.values.app + "-database-secret"
        volumeMounts:
        - mountPath: /var/lib/postgresql/backup
          name: #@ data.values.app + "-volume"
      resources:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "128Mi"
          cpu: "250m"
      volumes:
      - name: #@ data.values.app + "-volume"
        emptyDir:
          sizeLimit: #@ disk()
#@ end

#@ if data.values.postgres.enable_daily_backups:
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: #@ data.values.app + "-backup"
  namespace: #@ data.values.namespace
spec:
  schedule: "6 6 * * *"
  concurrencyPolicy: Replace
  successfulJobsHistoryLimit: 5
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec: #@ backupJobTemplate()
#@ end

#@ if data.values.postgres.run_backup_job_now:
---
apiVersion: batch/v1
kind: Job
metadata:
  name: #@ data.values.app + "-backup"
  namespace: #@ data.values.namespace
spec: #@ backupJobTemplate()
#@ end
